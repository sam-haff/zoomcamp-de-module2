id: ingest_taxi_data_gcp
namespace: company.team

inputs:
  - id: taxi_type
    type: SELECT
    displayName: Select taxi type
    values: ["green", "yellow"]
    defaults: "green"
  - id: year
    type: SELECT
    displayName: Select year
    values: ["2019", "2020", "2021"]
    defaults: "2019"
  - id: month
    type: SELECT
    displayName: Select month
    values: ["01","02","03","04","05","06","07","08","09","10","11","12"]
    defaults: "01"

variables:
  bq_table_staging: "{{kv('GCP_PROJECT')}}.{{kv('GCP_BQ')}}.{{inputs.taxi_type}}_{{inputs.year}}_{{inputs.month}}"
  bq_table: "{{kv('GCP_PROJECT')}}.{{kv('GCP_BQ')}}.{{inputs.taxi_type}}_tripdata"
  tripdata_table: "{{inputs.taxi_type}}_tripdata"
  file: "{{inputs.taxi_type}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  gcp_file: "gs://{{kv('GCP_BUCKET')}}/{{render(vars.file)}}"
  data: "{{outputs.prepare_data.outputFiles[render(vars.file)]}}"

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT')}}"
      location: "{{kv('GCP_LOC')}}"
      bucket: "{{kv('GCP_BUCKET')}}"
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      username: root
      password: root
      url: jdbc:postgresql://data-db:5432/taxi

tasks:
  - id: set_labels
    type: io.kestra.plugin.core.execution.Labels
    labels:
      current-file: "{{render(vars.file)}}"
      
  - id: prepare_data
    type: io.kestra.plugin.scripts.shell.Commands
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -O - https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi_type}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}
    outputFiles:
      - "*.csv"

  - id: upload_data
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcp_file)}}"

  - id: green
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi_type == 'green' }}"
    then:
      - id: green_init_bq_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{render(vars.bq_table)}}`(
              row_hash BYTES OPTIONS(description="Hash based on the values, that uniquely identify the trip record."),
              file STRING OPTIONS(description='Data source file name.'),
              VendorID STRING OPTIONS(description='A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
              lpep_pickup_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was engaged'),
              lpep_dropoff_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was disengaged'),
              store_and_fwd_flag STRING OPTIONS(description='This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip'),
              RatecodeID STRING OPTIONS(description='The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
              PULocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was engaged'),
              DOLocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was disengaged'),
              passenger_count INTEGER OPTIONS(description='The number of passengers in the vehicle. This is a driver-entered value.'),
              trip_distance NUMERIC OPTIONS(description='The elapsed trip distance in miles reported by the taximeter.'),
              fare_amount NUMERIC OPTIONS(description='The time-and-distance fare calculated by the meter'),
              extra NUMERIC OPTIONS(description='Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
              mta_tax NUMERIC OPTIONS(description='$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
              tip_amount NUMERIC OPTIONS(description='Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
              tolls_amount NUMERIC OPTIONS(description='Total amount of all tolls paid in trip.'),
              ehail_fee NUMERIC,
              improvement_surcharge NUMERIC OPTIONS(description='$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
              total_amount NUMERIC OPTIONS(description='The total amount charged to passengers. Does not include cash tips.'),
              payment_type INTEGER OPTIONS(description='A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
              trip_type STRING OPTIONS(description='A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned based on the metered rate in use but can be altered by the driver. 1= Street-hail 2= Dispatch'),
              congestion_surcharge NUMERIC OPTIONS(description='Congestion surcharge applied to trips in congested zones')
          );
      - id: green_init_bq_table_staging_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{render(vars.bq_table_staging)}}_ext`(
              VendorID STRING OPTIONS(description='A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
              lpep_pickup_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was engaged'),
              lpep_dropoff_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was disengaged'),
              store_and_fwd_flag STRING OPTIONS(description='This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip'),
              RatecodeID STRING OPTIONS(description='The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
              PULocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was engaged'),
              DOLocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was disengaged'),
              passenger_count INTEGER OPTIONS(description='The number of passengers in the vehicle. This is a driver-entered value.'),
              trip_distance NUMERIC OPTIONS(description='The elapsed trip distance in miles reported by the taximeter.'),
              fare_amount NUMERIC OPTIONS(description='The time-and-distance fare calculated by the meter'),
              extra NUMERIC OPTIONS(description='Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
              mta_tax NUMERIC OPTIONS(description='$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
              tip_amount NUMERIC OPTIONS(description='Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
              tolls_amount NUMERIC OPTIONS(description='Total amount of all tolls paid in trip.'),
              ehail_fee NUMERIC,
              improvement_surcharge NUMERIC OPTIONS(description='$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
              total_amount NUMERIC OPTIONS(description='The total amount charged to passengers. Does not include cash tips.'),
              payment_type INTEGER OPTIONS(description='A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
              trip_type STRING OPTIONS(description='A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned based on the metered rate in use but can be altered by the driver. 1= Street-hail 2= Dispatch'),
              congestion_surcharge NUMERIC OPTIONS(description='Congestion surcharge applied to trips in congested zones'))
            OPTIONS(
              uris=['{{render(vars.gcp_file)}}'],
              format='CSV',
              skip_leading_rows=1,
              ignore_unknown_values=TRUE
            );
      - id: green_init_bq_table_staging
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{render(vars.bq_table_staging)}}` 
            AS
              SELECT MD5( COALESCE(CAST (VendorID AS STRING), "") ||
                          COALESCE(CAST (lpep_pickup_datetime AS STRING), "") ||
                          COALESCE(CAST (lpep_dropoff_datetime AS STRING), "") ||
                          COALESCE(CAST (PULocationID AS STRING), "") ||
                          COALESCE(CAST (DOLocationID AS STRING), "") ||
                          COALESCE(CAST (trip_distance AS STRING), "") ||
                          COALESCE(CAST (total_amount AS STRING), "")) AS row_hash, 
                '{{render(vars.file)}}' AS file,
                *
              FROM `{{render(vars.bq_table_staging)}}_ext`;
      - id: green_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO {{render(vars.bq_table)}} AS t
          USING {{render(vars.bq_table_staging)}} AS s
          ON t.row_hash = s.row_hash
          WHEN NOT MATCHED THEN
            INSERT (row_hash, file, VendorID, lpep_pickup_datetime,lpep_dropoff_datetime,store_and_fwd_flag,  RatecodeID,PULocationID,DOLocationID,passenger_count,trip_distance,fare_amount,extra, mta_tax,tip_amount,tolls_amount,ehail_fee,improvement_surcharge,total_amount,payment_type,trip_type,congestion_surcharge)
            VALUES (
              s.row_hash, s.file, s.VendorID, s.lpep_pickup_datetime, s.lpep_dropoff_datetime, 
              s.store_and_fwd_flag, s.RatecodeID, s.PULocationID, s.DOLocationID, s.passenger_count, s.trip_distance, s.fare_amount, s.extra, s.mta_tax, s.tip_amount, s.tolls_amount, s.ehail_fee,s.improvement_surcharge, s.total_amount, s.payment_type, s.trip_type, s.congestion_surcharge
            );
  - id: yellow
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi_type == 'yellow' }}"
    then:
      - id: yellow_init_bq_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{render(vars.bq_table)}}`(
              row_hash BYTES OPTIONS(description="Hash based on the values, that uniquely identify the trip record."),
              file STRING OPTIONS(description='Data source file name.'),
              VendorID STRING OPTIONS(description='A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
              tpep_pickup_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was engaged'),
              tpep_dropoff_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was disengaged'),
              passenger_count INTEGER OPTIONS(description='The number of passengers in the vehicle. This is a driver-entered value.'),
              trip_distance NUMERIC OPTIONS(description='The elapsed trip distance in miles reported by the taximeter.'),
              RatecodeID STRING OPTIONS(description='The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
              store_and_fwd_flag STRING OPTIONS(description='This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip'),
              PULocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was engaged'),
              DOLocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was disengaged'),
              payment_type INTEGER OPTIONS(description='A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
              fare_amount NUMERIC OPTIONS(description='The time-and-distance fare calculated by the meter'),
              extra NUMERIC OPTIONS(description='Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
              mta_tax NUMERIC OPTIONS(description='$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
              tip_amount NUMERIC OPTIONS(description='Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
              tolls_amount NUMERIC OPTIONS(description='Total amount of all tolls paid in trip.'),
              improvement_surcharge NUMERIC OPTIONS(description='$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
              total_amount NUMERIC OPTIONS(description='The total amount charged to passengers. Does not include cash tips.'),
              congestion_surcharge NUMERIC OPTIONS(description='Congestion surcharge applied to trips in congested zones')
          );
      - id: yellow_init_bq_table_staging_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{render(vars.bq_table_staging)}}_ext`(
              VendorID STRING OPTIONS(description='A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
              tpep_pickup_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was engaged'),
              tpep_dropoff_datetime TIMESTAMP OPTIONS(description='The date and time when the meter was disengaged'),
              passenger_count INTEGER OPTIONS(description='The number of passengers in the vehicle. This is a driver-entered value.'),
              trip_distance NUMERIC OPTIONS(description='The elapsed trip distance in miles reported by the taximeter.'),
              RatecodeID STRING OPTIONS(description='The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
              store_and_fwd_flag STRING OPTIONS(description='This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip'),
              PULocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was engaged'),
              DOLocationID STRING OPTIONS(description='TLC Taxi Zone in which the taximeter was disengaged'),
              payment_type INTEGER OPTIONS(description='A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
              fare_amount NUMERIC OPTIONS(description='The time-and-distance fare calculated by the meter'),
              extra NUMERIC OPTIONS(description='Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
              mta_tax NUMERIC OPTIONS(description='$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
              tip_amount NUMERIC OPTIONS(description='Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
              tolls_amount NUMERIC OPTIONS(description='Total amount of all tolls paid in trip.'),
              improvement_surcharge NUMERIC OPTIONS(description='$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
              total_amount NUMERIC OPTIONS(description='The total amount charged to passengers. Does not include cash tips.'),
              congestion_surcharge NUMERIC OPTIONS(description='Congestion surcharge applied to trips in congested zones')
            )
            OPTIONS(
              uris=['{{render(vars.gcp_file)}}'],
              format='CSV',
              skip_leading_rows=1,
              ignore_unknown_values=TRUE
            );
      - id: yellow_init_bq_table_staging
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{render(vars.bq_table_staging)}}` 
            AS
              SELECT MD5( COALESCE(CAST (VendorID AS STRING), "") ||
                          COALESCE(CAST (tpep_pickup_datetime AS STRING), "") ||
                          COALESCE(CAST (tpep_dropoff_datetime AS STRING), "") ||
                          COALESCE(CAST (PULocationID AS STRING), "") ||
                          COALESCE(CAST (DOLocationID AS STRING), "") ||
                          COALESCE(CAST (trip_distance AS STRING), "") ||
                          COALESCE(CAST (total_amount AS STRING), "")) AS row_hash, 
                '{{render(vars.file)}}' AS file,
                *
              FROM `{{render(vars.bq_table_staging)}}_ext`;
      - id: yellow_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO {{render(vars.bq_table)}} AS t
          USING {{render(vars.bq_table_staging)}} AS s
          ON t.row_hash = s.row_hash
          WHEN NOT MATCHED THEN
            INSERT (row_hash, file, VendorID, tpep_pickup_datetime,tpep_dropoff_datetime,store_and_fwd_flag,  RatecodeID,PULocationID,DOLocationID,passenger_count,trip_distance,fare_amount,extra, mta_tax,tip_amount, tolls_amount, improvement_surcharge, total_amount,payment_type, congestion_surcharge)
            VALUES (
              s.row_hash, s.file, s.VendorID, s.tpep_pickup_datetime, s.tpep_dropoff_datetime, 
              s.store_and_fwd_flag, s.RatecodeID, s.PULocationID, s.DOLocationID, s.passenger_count, s.trip_distance, s.fare_amount, s.extra, s.mta_tax, s.tip_amount, s.tolls_amount, s.improvement_surcharge, s.total_amount, s.payment_type, s.congestion_surcharge
            );
  - id: clear_storage
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    




      

  

    